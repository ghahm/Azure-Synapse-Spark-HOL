# <분석 요건> 1500 마일을 초과하는 항공편의 항공기 모델명과 운항 횟수

from pyspark.sql.types import *

# 3.1 Flihgt DataFrame 생성하고 자료 조회하기
flightSchema = StructType() \
                            .add("Month", StringType(), False) \
                            .add("DayofMonth", StringType(), False) \
                            .add("DayOfWeek", StringType(), False) \
                            .add("DepTime", IntegerType(), False) \
                            .add("ArrTime", IntegerType(), False) \
                            .add("UniqueCarrier", StringType(), False) \
                            .add("FlightNum", StringType(), False) \
                            .add("TailNum", StringType(), True) \
                            .add("ElapsedTime", IntegerType(), False) \
                            .add("AirTime", IntegerType(), False) \
                            .add("ArrDelay", IntegerType(), False) \
                            .add("DepDelay", IntegerType(), False) \
                            .add("Origin", StringType(), False) \
                            .add("Dest", StringType(), False) \
                            .add("Distance", IntegerType(), False) \
                            .add("TaxiIn", IntegerType(), False) \
                            .add("TaxiOut", IntegerType(), False) \
                            .add("Cancelled", IntegerType(), False) \
                            .add("CancellationCode", StringType(), False) \
                            .add("Diverted", IntegerType(), False)
      
flightDF = spark.read.format("csv") \
      .option("header", False) \
      .schema(flightSchema) \
      .load("abfss://[container명]@[storageaccount명].dfs.core.windows.net/sparkhol/flight-data/flights.csv")
flightDF.take(5)

# 쿼리 수행을 위하여 DataFrame을 임시 테이블로 등록
flightDF.registerTempTable("flightTable")


# 3.2 flightTable : %%sql magic 정의 -> 쿼리 수행 (주의 : 아래 sql magic이 포함된 셀에는 # comment를 추가하면 에러 발생하기 때문에 별도의 셀로 작성)

%%sql
-- TailNum, 1,500 마일 이상 운항 횟수 (내림차순)
SELECT TailNum, count(TailNum) as cnt 
FROM ( 
    SELECT TailNum 
    FROM flightTable 
    WHERE Distance > 1500 
) longDist 
GROUP BY TailNum
ORDER BY cnt DESC
LIMIT 10

# 3.3.1 planeData DataFrame 생성하고 자료 조회하기
planeDataSchema = StructType() \
                            .add("Tailnum", StringType(), False) \
                            .add("Type", StringType(), False) \
                            .add("Manufacturer", StringType(), False) \
                            .add("Issue_Date", DateType(), False) \
                            .add("Model", StringType(), False) \
                            .add("Status", StringType(), False) \
                            .add("Aircraft_Type", StringType(), False) \
                            .add("Engine_Type", StringType(), False) \
                            .add("Year", IntegerType(), False)
    
planeDataBaseDF = spark.read.format("csv") \
      .option("header", True) \
      .schema(planeDataSchema) \
      .load("abfss://demodata@adlsgen2krc.dfs.core.windows.net/sparkhol/flight-data/plane-data.csv")
planeDataBaseDF.take(5)

# 3.3.2 planeData DataFrame 생성하고 자료 조회하기 (2개 컬럼만 조회)
planeDataDF = planeDataBaseDF.select("Tailnum", "Model")
planeDataDF.take(5)

# 쿼리 수행을 위하여 DataFrame을 임시 테이블로 등록
planeDataDF.registerTempTable("planeDataTable")

#planeDataDF.collect()
planeDataDF.take(5)

# 테스트 쿼리 수행
%%sql
SELECT * from planeDataTable
LIMIT 10

# 3.4 최종 쿼리 수행
%%sql
SELECT planeDataTable.Model, sum(cnt) as sumofcnt
FROM ( 
    SELECT longDist.TailNum, count(longDist.TailNum) as cnt \
    FROM ( \
        SELECT flightTable.TailNum \
        FROM flightTable \
        WHERE Distance > 1500 \
    ) longDist \
    GROUP BY longDist.TailNum \
    ORDER BY cnt DESC \
) longDistanceFlight \
INNER JOIN planeDataTable \
ON longDistanceFlight.TailNum=planeDataTable.Tailnum \
GROUP BY planeDataTable.Model \
ORDER BY sumofcnt DESC
